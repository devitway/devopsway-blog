/**
 * üìã –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è DevOps Way
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
 */

(function() {
    'use strict';
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        buttonText: {
            copy: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
            copying: '‚è≥ –ö–æ–ø–∏—Ä—É—é...',
            copied: '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
            error: '‚ùå –û—à–∏–±–∫–∞'
        },
        timeouts: {
            feedback: 2000,
            fadeOut: 300
        },
        selectors: {
            codeBlocks: 'pre > code',
            highlights: '.highlight'
        }
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    let copyStats = {
        total: 0,
        successful: 0,
        failed: 0
    };
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {HTMLElement} codeBlock - –ë–ª–æ–∫ –∫–æ–¥–∞
     * @returns {HTMLButtonElement} –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    function createCopyButton(codeBlock) {
        const button = document.createElement('button');
        button.className = 'copy-code';
        button.textContent = CONFIG.buttonText.copy;
        button.setAttribute('aria-label', '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        button.setAttribute('title', '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
        button.type = 'button';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        button.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                button.click();
            }
        });
        
        return button;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∫–æ–¥–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
     * @param {HTMLElement} codeElement - –≠–ª–µ–º–µ–Ω—Ç —Å –∫–æ–¥–æ–º
     * @returns {string} –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∫–æ–¥–∞
     */
    function getCleanCodeText(codeElement) {
        const clone = codeElement.cloneNode(true);
        
        // –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        const lineNumbers = clone.querySelectorAll('.ln, .line-number, .lineno');
        lineNumbers.forEach(ln => ln.remove());
        
        // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Hugo highlight
        const extraElements = clone.querySelectorAll('.hl, .lnt');
        extraElements.forEach(el => el.remove());
        
        return clone.textContent || clone.innerText || '';
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –±–ª–æ–∫—É –∫–æ–¥–∞
     * @param {HTMLElement} codeBlock - –ë–ª–æ–∫ –∫–æ–¥–∞
     * @returns {string} –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    function detectLanguage(codeBlock) {
        const highlight = codeBlock.closest('.highlight');
        const classList = Array.from(highlight?.classList || []);
        
        // –ò—â–µ–º –∫–ª–∞—Å—Å —è–∑—ã–∫–∞
        for (const className of classList) {
            if (className.startsWith('language-')) {
                return className.replace('language-', '');
            }
        }
        
        // Fallback –∫ data-–∞—Ç—Ä–∏–±—É—Ç–∞–º
        return highlight?.dataset?.lang || 'code';
    }
    
    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async function copyToClipboard(text) {
        try {
            // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API
            if (navigator.clipboard && window.isSecureContext) {
                await navigator.clipboard.writeText(text);
                return true;
            }
            
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            return fallbackCopyToClipboard(text);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Clipboard API:', error);
            return fallbackCopyToClipboard(text);
        }
    }
    
    /**
     * Fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    function fallbackCopyToClipboard(text) {
        try {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            textArea.setAttribute('aria-hidden', 'true');
            
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            return successful;
        } catch (error) {
            console.error('Fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error);
            return false;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
     * @param {HTMLButtonElement} button - –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {boolean} success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param {string} language - –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    function showCopyFeedback(button, success, language) {
        const originalText = button.textContent;
        const originalTitle = button.title;
        
        if (success) {
            button.textContent = CONFIG.buttonText.copied;
            button.title = `${language.toUpperCase()} –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`;
            button.classList.add('copy-success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            copyStats.successful++;
            
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            createSuccessNotification(button, language);
        } else {
            button.textContent = CONFIG.buttonText.error;
            button.title = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥';
            button.classList.add('copy-error');
            
            copyStats.failed++;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(() => {
            button.textContent = originalText;
            button.title = originalTitle;
            button.classList.remove('copy-success', 'copy-error');
        }, CONFIG.timeouts.feedback);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
     * @param {HTMLButtonElement} button - –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} language - –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    function createSuccessNotification(button, language) {
        const notification = document.createElement('div');
        notification.className = 'copy-notification';
        notification.textContent = `${language.toUpperCase()} –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const rect = button.getBoundingClientRect();
        notification.style.cssText = `
            position: fixed;
            top: ${rect.bottom + 10}px;
            right: ${window.innerWidth - rect.right}px;
            background: var(--accent-secondary, #10b981);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 0.75rem;
            font-weight: 600;
            z-index: 1000;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        `;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateY(0)';
        });
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, CONFIG.timeouts.fadeOut);
        }, CONFIG.timeouts.feedback - CONFIG.timeouts.fadeOut);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
     */
    async function handleCopyClick(event) {
        const button = event.target;
        const codeBlock = button.closest('.highlight').querySelector('code');
        
        if (!codeBlock) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const originalText = button.textContent;
        button.textContent = CONFIG.buttonText.copying;
        button.disabled = true;
        
        copyStats.total++;
        
        const codeText = getCleanCodeText(codeBlock);
        const language = detectLanguage(codeBlock);
        
        try {
            const success = await copyToClipboard(codeText);
            showCopyFeedback(button, success, language);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if (success) {
                console.log(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${language} –∫–æ–¥ (${codeText.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                window.dispatchEvent(new CustomEvent('codecopy', {
                    detail: {
                        language,
                        length: codeText.length,
                        success: true
                    }
                }));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            showCopyFeedback(button, false, language);
        } finally {
            button.disabled = false;
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –±–ª–æ–∫—É –∫–æ–¥–∞
     * @param {HTMLElement} codeBlock - –ë–ª–æ–∫ –∫–æ–¥–∞
     */
    function addCopyButtonToCodeBlock(codeBlock) {
        const highlight = codeBlock.closest('.highlight');
        if (!highlight || highlight.querySelector('.copy-code')) {
            return; // –ö–Ω–æ–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
        
        const button = createCopyButton(codeBlock);
        button.addEventListener('click', handleCopyClick);
        
        highlight.style.position = 'relative';
        highlight.appendChild(button);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
     */
    function initializeCopyButtons() {
        const codeBlocks = document.querySelectorAll(CONFIG.selectors.codeBlocks);
        
        codeBlocks.forEach(codeBlock => {
            addCopyButtonToCodeBlock(codeBlock);
        });
        
        console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${codeBlocks.length} –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    function addCopyButtonStyles() {
        const style = document.createElement('style');
        style.textContent = `
            /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –≤ dark-theme-enhanced.css */
            
            /* –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ */
            .copy-code.copy-success {
                background: var(--accent-secondary, #10b981) !important;
                color: white !important;
                border-color: var(--accent-secondary, #10b981) !important;
            }
            
            .copy-code.copy-error {
                background: var(--accent-error, #ef4444) !important;
                color: white !important;
                border-color: var(--accent-error, #ef4444) !important;
            }
            
            .copy-code:disabled {
                opacity: 0.6 !important;
                cursor: not-allowed !important;
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
            .copy-notification {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
            }
            
            /* –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ */
            .highlight:hover .copy-code {
                opacity: 1 !important;
            }
            
            /* –§–æ–∫—É—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */
            .copy-code:focus {
                outline: 2px solid var(--accent-primary, #3b82f6) !important;
                outline-offset: 2px !important;
            }
        `;
        document.head.appendChild(style);
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    function getCopyStats() {
        return {
            ...copyStats,
            successRate: copyStats.total > 0 ? (copyStats.successful / copyStats.total * 100).toFixed(1) + '%' : '0%'
        };
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    function handleDynamicContent() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            const codeBlocks = node.querySelectorAll?.(CONFIG.selectors.codeBlocks) || [];
                            codeBlocks.forEach(addCopyButtonToCodeBlock);
                        }
                    });
                }
            });
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        return observer;
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    function init() {
        addCopyButtonStyles();
        initializeCopyButtons();
        handleDynamicContent();
        
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        window.DevOpsWayCopy = {
            getStats: getCopyStats,
            addToCodeBlock: addCopyButtonToCodeBlock,
            reinitialize: initializeCopyButtons
        };
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        window.dispatchEvent(new CustomEvent('copyready', {
            detail: { initialized: true }
        }));
        
        console.log('üìã –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }