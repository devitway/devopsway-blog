name: Deploy Hugo site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # –û—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
      - name: Debug - Project structure
        run: |
          echo "=== PROJECT STRUCTURE ==="
          echo "Working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo ""
          echo "=== CONTENT STRUCTURE ==="
          find content -type f -name "*.md" | sort
          echo ""
          echo "=== LAYOUTS STRUCTURE ==="
          find layouts -type f 2>/dev/null | sort || echo "No layouts directory"
          echo ""
          echo "=== THEME CHECK ==="
          ls -la themes/ 2>/dev/null || echo "No themes directory"
          echo ""
          echo "=== HUGO VERSION ==="
          hugo version
          echo ""
          echo "=== HUGO CONFIG CHECK ==="
          hugo config | head -20

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Hugo
      - name: Validate Hugo configuration
        run: |
          echo "=== VALIDATING HUGO CONFIG ==="
          hugo config --format yaml > config-check.yaml
          echo "Base URL: $(hugo config | grep baseURL || echo 'baseURL not found')"
          echo "Title: $(hugo config | grep title || echo 'title not found')"
          echo "Theme: $(hugo config | grep theme || echo 'theme not found')"

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
      - name: Check critical files
        run: |
          echo "=== CHECKING CRITICAL FILES ==="
          
          echo "Checking about page:"
          if [ -f "content/about.md" ]; then
            echo "‚úÖ content/about.md exists"
            head -10 content/about.md
          elif [ -f "content/about/_index.md" ]; then
            echo "‚ö†Ô∏è  Found content/about/_index.md (should be content/about.md)"
          else
            echo "‚ùå No about page found"
          fi
          
          echo ""
          echo "Checking search page:"
          if [ -f "content/search.md" ]; then
            echo "‚úÖ content/search.md exists"
            head -5 content/search.md
          else
            echo "‚ùå content/search.md not found"
          fi
          
          echo ""
          echo "Checking search layout:"
          if [ -f "layouts/_default/search.html" ]; then
            echo "‚úÖ layouts/_default/search.html exists"
          else
            echo "‚ùå layouts/_default/search.html not found"
          fi

      # –°–±–æ—Ä–∫–∞ —Å–∞–π—Ç–∞
      - name: Build site
        run: |
          echo "=== BUILDING SITE ==="
          hugo --minify --verbose --debug

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
      - name: Debug - Build results
        run: |
          echo "=== BUILD RESULTS ==="
          echo "Public directory contents:"
          ls -la public/
          echo ""
          
          echo "=== CHECKING NAVIGATION PAGES ==="
          
          echo "About page:"
          if [ -d "public/about/" ]; then
            echo "‚úÖ public/about/ directory exists"
            ls -la public/about/
          else
            echo "‚ùå public/about/ directory not found"
          fi
          
          echo ""
          echo "Search page:"
          if [ -d "public/search/" ]; then
            echo "‚úÖ public/search/ directory exists"
            ls -la public/search/
          else
            echo "‚ùå public/search/ directory not found"
          fi
          
          echo ""
          echo "Categories page:"
          if [ -d "public/categories/" ]; then
            echo "‚úÖ public/categories/ directory exists"
            ls -la public/categories/
          else
            echo "‚ùå public/categories/ directory not found"
          fi
          
          echo ""
          echo "Posts page:"
          if [ -d "public/posts/" ]; then
            echo "‚úÖ public/posts/ directory exists"
            ls -la public/posts/
          else
            echo "‚ùå public/posts/ directory not found"
          fi
          
          echo ""
          echo "=== CHECKING FEED FILES ==="
          if [ -f "public/index.json" ]; then
            echo "‚úÖ public/index.json exists (for search)"
            echo "Size: $(wc -c < public/index.json) bytes"
          else
            echo "‚ùå public/index.json not found"
          fi
          
          if [ -f "public/feed.xml" ]; then
            echo "‚úÖ public/feed.xml exists"
          else
            echo "‚ùå public/feed.xml not found"
          fi

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
      - name: Validate HTML structure
        run: |
          echo "=== HTML VALIDATION ==="
          
          echo "Checking main pages HTML:"
          for page in "index.html" "about/index.html" "search/index.html" "categories/index.html" "posts/index.html"; do
            if [ -f "public/$page" ]; then
              echo "‚úÖ $page exists"
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML
              if grep -q "<html" "public/$page" && grep -q "</html>" "public/$page"; then
                echo "   ‚úÖ Valid HTML structure"
              else
                echo "   ‚ùå Invalid HTML structure"
              fi
            else
              echo "‚ùå $page not found"
            fi
          done
          
          echo ""
          echo "Checking navigation links:"
          if [ -f "public/index.html" ]; then
            echo "Navigation links in main page:"
            grep -o 'href="[^"]*"' public/index.html | grep -E "(about|search|categories|posts)" || echo "No navigation links found"
          fi

      # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
      - name: Test page accessibility
        run: |
          echo "=== TESTING PAGE STRUCTURE ==="
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          for page in "about/index.html" "search/index.html"; do
            if [ -f "public/$page" ]; then
              echo "Testing $page:"
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
              if grep -q "<title>" "public/$page"; then
                echo "  ‚úÖ Has title tag"
              else
                echo "  ‚ùå Missing title tag"
              fi
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
              if grep -q "<main" "public/$page" || grep -q "class=\"main\"" "public/$page"; then
                echo "  ‚úÖ Has main content area"
              else
                echo "  ‚ùå Missing main content area"
              fi
              
              # –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
              if [[ "$page" == "search/index.html" ]]; then
                if grep -q "fuse.js" "public/$page"; then
                  echo "  ‚úÖ Has search functionality"
                else
                  echo "  ‚ùå Missing search functionality"
                fi
              fi
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
      - name: Post-deploy validation
        run: |
          echo "=== POST-DEPLOY CHECK ==="
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Deployment completed successfully!"
          echo ""
          echo "üîç Manual checks needed:"
          echo "1. Visit: ${{ steps.deployment.outputs.page_url }}about/"
          echo "2. Visit: ${{ steps.deployment.outputs.page_url }}search/"
          echo "3. Visit: ${{ steps.deployment.outputs.page_url }}categories/"
          echo "4. Test navigation menu"
          echo "5. Test search functionality"
